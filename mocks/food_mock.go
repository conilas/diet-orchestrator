// Code generated by MockGen. DO NOT EDIT.
// Source: be-test/pkg/food/v1/food.pb.go

// Package mock_food is a generated GoMock package.
package mocks

import (
	context "context"
	food "diet-scheduler/be-test/pkg/food/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockOrderServiceClient is a mock of OrderServiceClient interface
type MockOrderServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceClientMockRecorder
}

// MockOrderServiceClientMockRecorder is the mock recorder for MockOrderServiceClient
type MockOrderServiceClientMockRecorder struct {
	mock *MockOrderServiceClient
}

// NewMockOrderServiceClient creates a new mock instance
func NewMockOrderServiceClient(ctrl *gomock.Controller) *MockOrderServiceClient {
	mock := &MockOrderServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrderServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderServiceClient) EXPECT() *MockOrderServiceClientMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method
func (m *MockOrderServiceClient) CreateOrder(ctx context.Context, in *food.CreateOrderRequest, opts ...grpc.CallOption) (*food.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrder", varargs...)
	ret0, _ := ret[0].(*food.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder
func (mr *MockOrderServiceClientMockRecorder) CreateOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).CreateOrder), varargs...)
}

// GetOrder mocks base method
func (m *MockOrderServiceClient) GetOrder(ctx context.Context, in *food.GetOrderRequest, opts ...grpc.CallOption) (*food.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrder", varargs...)
	ret0, _ := ret[0].(*food.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder
func (mr *MockOrderServiceClientMockRecorder) GetOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).GetOrder), varargs...)
}

// ListOrders mocks base method
func (m *MockOrderServiceClient) ListOrders(ctx context.Context, in *food.ListOrdersRequest, opts ...grpc.CallOption) (*food.ListOrdersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrders", varargs...)
	ret0, _ := ret[0].(*food.ListOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders
func (mr *MockOrderServiceClientMockRecorder) ListOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOrderServiceClient)(nil).ListOrders), varargs...)
}

// UpdateOrder mocks base method
func (m *MockOrderServiceClient) UpdateOrder(ctx context.Context, in *food.UpdateOrderRequest, opts ...grpc.CallOption) (*food.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrder", varargs...)
	ret0, _ := ret[0].(*food.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder
func (mr *MockOrderServiceClientMockRecorder) UpdateOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).UpdateOrder), varargs...)
}

// MockOrderServiceServer is a mock of OrderServiceServer interface
type MockOrderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceServerMockRecorder
}

// MockOrderServiceServerMockRecorder is the mock recorder for MockOrderServiceServer
type MockOrderServiceServerMockRecorder struct {
	mock *MockOrderServiceServer
}

// NewMockOrderServiceServer creates a new mock instance
func NewMockOrderServiceServer(ctrl *gomock.Controller) *MockOrderServiceServer {
	mock := &MockOrderServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderServiceServer) EXPECT() *MockOrderServiceServerMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method
func (m *MockOrderServiceServer) CreateOrder(arg0 context.Context, arg1 *food.CreateOrderRequest) (*food.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*food.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder
func (mr *MockOrderServiceServerMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).CreateOrder), arg0, arg1)
}

// GetOrder mocks base method
func (m *MockOrderServiceServer) GetOrder(arg0 context.Context, arg1 *food.GetOrderRequest) (*food.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(*food.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder
func (mr *MockOrderServiceServerMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).GetOrder), arg0, arg1)
}

// ListOrders mocks base method
func (m *MockOrderServiceServer) ListOrders(arg0 context.Context, arg1 *food.ListOrdersRequest) (*food.ListOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0, arg1)
	ret0, _ := ret[0].(*food.ListOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders
func (mr *MockOrderServiceServerMockRecorder) ListOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOrderServiceServer)(nil).ListOrders), arg0, arg1)
}

// UpdateOrder mocks base method
func (m *MockOrderServiceServer) UpdateOrder(arg0 context.Context, arg1 *food.UpdateOrderRequest) (*food.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(*food.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder
func (mr *MockOrderServiceServerMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).UpdateOrder), arg0, arg1)
}

// MockKitchenServiceClient is a mock of KitchenServiceClient interface
type MockKitchenServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockKitchenServiceClientMockRecorder
}

// MockKitchenServiceClientMockRecorder is the mock recorder for MockKitchenServiceClient
type MockKitchenServiceClientMockRecorder struct {
	mock *MockKitchenServiceClient
}

// NewMockKitchenServiceClient creates a new mock instance
func NewMockKitchenServiceClient(ctrl *gomock.Controller) *MockKitchenServiceClient {
	mock := &MockKitchenServiceClient{ctrl: ctrl}
	mock.recorder = &MockKitchenServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKitchenServiceClient) EXPECT() *MockKitchenServiceClientMockRecorder {
	return m.recorder
}

// CreateKitchenOrder mocks base method
func (m *MockKitchenServiceClient) CreateKitchenOrder(ctx context.Context, in *food.CreateKitchenOrderRequest, opts ...grpc.CallOption) (*food.KitchenOrder, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKitchenOrder", varargs...)
	ret0, _ := ret[0].(*food.KitchenOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKitchenOrder indicates an expected call of CreateKitchenOrder
func (mr *MockKitchenServiceClientMockRecorder) CreateKitchenOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKitchenOrder", reflect.TypeOf((*MockKitchenServiceClient)(nil).CreateKitchenOrder), varargs...)
}

// GetKitchenOrder mocks base method
func (m *MockKitchenServiceClient) GetKitchenOrder(ctx context.Context, in *food.GetKitchenOrderRequest, opts ...grpc.CallOption) (*food.KitchenOrder, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKitchenOrder", varargs...)
	ret0, _ := ret[0].(*food.KitchenOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKitchenOrder indicates an expected call of GetKitchenOrder
func (mr *MockKitchenServiceClientMockRecorder) GetKitchenOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKitchenOrder", reflect.TypeOf((*MockKitchenServiceClient)(nil).GetKitchenOrder), varargs...)
}

// MockKitchenServiceServer is a mock of KitchenServiceServer interface
type MockKitchenServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockKitchenServiceServerMockRecorder
}

// MockKitchenServiceServerMockRecorder is the mock recorder for MockKitchenServiceServer
type MockKitchenServiceServerMockRecorder struct {
	mock *MockKitchenServiceServer
}

// NewMockKitchenServiceServer creates a new mock instance
func NewMockKitchenServiceServer(ctrl *gomock.Controller) *MockKitchenServiceServer {
	mock := &MockKitchenServiceServer{ctrl: ctrl}
	mock.recorder = &MockKitchenServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKitchenServiceServer) EXPECT() *MockKitchenServiceServerMockRecorder {
	return m.recorder
}

// CreateKitchenOrder mocks base method
func (m *MockKitchenServiceServer) CreateKitchenOrder(arg0 context.Context, arg1 *food.CreateKitchenOrderRequest) (*food.KitchenOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKitchenOrder", arg0, arg1)
	ret0, _ := ret[0].(*food.KitchenOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKitchenOrder indicates an expected call of CreateKitchenOrder
func (mr *MockKitchenServiceServerMockRecorder) CreateKitchenOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKitchenOrder", reflect.TypeOf((*MockKitchenServiceServer)(nil).CreateKitchenOrder), arg0, arg1)
}

// GetKitchenOrder mocks base method
func (m *MockKitchenServiceServer) GetKitchenOrder(arg0 context.Context, arg1 *food.GetKitchenOrderRequest) (*food.KitchenOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKitchenOrder", arg0, arg1)
	ret0, _ := ret[0].(*food.KitchenOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKitchenOrder indicates an expected call of GetKitchenOrder
func (mr *MockKitchenServiceServerMockRecorder) GetKitchenOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKitchenOrder", reflect.TypeOf((*MockKitchenServiceServer)(nil).GetKitchenOrder), arg0, arg1)
}

// MockDroneServiceClient is a mock of DroneServiceClient interface
type MockDroneServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDroneServiceClientMockRecorder
}

// MockDroneServiceClientMockRecorder is the mock recorder for MockDroneServiceClient
type MockDroneServiceClientMockRecorder struct {
	mock *MockDroneServiceClient
}

// NewMockDroneServiceClient creates a new mock instance
func NewMockDroneServiceClient(ctrl *gomock.Controller) *MockDroneServiceClient {
	mock := &MockDroneServiceClient{ctrl: ctrl}
	mock.recorder = &MockDroneServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDroneServiceClient) EXPECT() *MockDroneServiceClientMockRecorder {
	return m.recorder
}

// CreateShipment mocks base method
func (m *MockDroneServiceClient) CreateShipment(ctx context.Context, in *food.CreateShipmentRequest, opts ...grpc.CallOption) (*food.Shipment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateShipment", varargs...)
	ret0, _ := ret[0].(*food.Shipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShipment indicates an expected call of CreateShipment
func (mr *MockDroneServiceClientMockRecorder) CreateShipment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShipment", reflect.TypeOf((*MockDroneServiceClient)(nil).CreateShipment), varargs...)
}

// GetShipment mocks base method
func (m *MockDroneServiceClient) GetShipment(ctx context.Context, in *food.GetShipmentRequest, opts ...grpc.CallOption) (*food.Shipment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetShipment", varargs...)
	ret0, _ := ret[0].(*food.Shipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShipment indicates an expected call of GetShipment
func (mr *MockDroneServiceClientMockRecorder) GetShipment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShipment", reflect.TypeOf((*MockDroneServiceClient)(nil).GetShipment), varargs...)
}

// MockDroneServiceServer is a mock of DroneServiceServer interface
type MockDroneServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDroneServiceServerMockRecorder
}

// MockDroneServiceServerMockRecorder is the mock recorder for MockDroneServiceServer
type MockDroneServiceServerMockRecorder struct {
	mock *MockDroneServiceServer
}

// NewMockDroneServiceServer creates a new mock instance
func NewMockDroneServiceServer(ctrl *gomock.Controller) *MockDroneServiceServer {
	mock := &MockDroneServiceServer{ctrl: ctrl}
	mock.recorder = &MockDroneServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDroneServiceServer) EXPECT() *MockDroneServiceServerMockRecorder {
	return m.recorder
}

// CreateShipment mocks base method
func (m *MockDroneServiceServer) CreateShipment(arg0 context.Context, arg1 *food.CreateShipmentRequest) (*food.Shipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShipment", arg0, arg1)
	ret0, _ := ret[0].(*food.Shipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShipment indicates an expected call of CreateShipment
func (mr *MockDroneServiceServerMockRecorder) CreateShipment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShipment", reflect.TypeOf((*MockDroneServiceServer)(nil).CreateShipment), arg0, arg1)
}

// GetShipment mocks base method
func (m *MockDroneServiceServer) GetShipment(arg0 context.Context, arg1 *food.GetShipmentRequest) (*food.Shipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShipment", arg0, arg1)
	ret0, _ := ret[0].(*food.Shipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShipment indicates an expected call of GetShipment
func (mr *MockDroneServiceServerMockRecorder) GetShipment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShipment", reflect.TypeOf((*MockDroneServiceServer)(nil).GetShipment), arg0, arg1)
}
